/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
Metal shaders used for this sample.
*/

#include <metal_stdlib>
#include "AAPLUserDylib.h"
// Shared types between CPU and Metal shader code
#include "AAPLShaderTypes.h"

using namespace metal;

struct Vertex
{
    float3 position [[attribute(AAPLVertexAttributePosition)]];
    float2 texCoord [[attribute(AAPLVertexAttributeTexcoord)]];
};

// Vertex shader outputs and per-fragment inputs. Includes clip-space position and vertex outputs
// interpolated by rasterizer and fed to each fragment generated by clip-space primitives.
struct ColorInOut
{
    float4 position [[position]];
    float2 texCoord;
};

vertex ColorInOut vertexShader(Vertex                      in        [[ stage_in ]],
                               constant AAPLPerFrameData & frameData [[ buffer(AAPLBufferIndexFrameData) ]])
{
    ColorInOut out;
    
    float4 position = float4(in.position, 1.0);
    out.position = frameData.projectionMatrix * frameData.modelViewMatrix * position;
    out.texCoord = in.texCoord;
    
    return out;
}

fragment half4 fragmentShader(ColorInOut                  in        [[ stage_in ]],
                              constant AAPLPerFrameData & frameData [[ buffer(AAPLBufferIndexFrameData) ]],
                              texture2d<half>             colorMap  [[ texture(AAPLTextureIndexColorMap) ]])
{
    constexpr sampler colorSampler(mip_filter::linear,
                                   mag_filter::linear,
                                   min_filter::linear);
    
    half4 colorSample = colorMap.sample(colorSampler, in.texCoord.xy);
    
    return colorSample;
}

kernel void dylibKernel(texture2d<float, access::read> inTexture  [[ texture(AAPLTextureIndexComputeIn) ]],
                        texture2d<half, access::write> outTexture [[ texture(AAPLTextureIndexComputeOut) ]],
                        uint2                          gid        [[ thread_position_in_grid ]])
{
    float4 inColor = inTexture.read(gid);
    float4 color = AAPLUserDylib::getFullScreenColor(inColor);
    outTexture.write(half4(color), gid);
}
